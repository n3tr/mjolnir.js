{"version":3,"sources":["webpack:///./node_modules/ocular-gatsby/src/templates/doc-page-markdown.jsx"],"names":["query","html","props","relativeLinks","href","hrefWithoutLeadingSlash","DocTemplate","replaceLinks","render","__html","React","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;CAIA;AACA;;AACO,IAAMA,KAAK,GAAX;;AAgBP,6BAA6B;AAAA,MACpBC,IADoB,GACZC,KAAK,CAALA,KADY,SACZA,CADY;AAAA,MAEpBC,aAFoB,GAEHD,KAAK,CAFF,WAEHA,CAFG;AAI3B,SAAO,IAAI,CAAJ,2BAAgC,sBAAgB;AACrD;AACA,QAAIE,IAAI,CAAJA,sBAA2BA,IAAI,CAAJA,WAA/B,GAA+BA,CAA/B,EAAqD;AACnD;AACA;AACD;;AACD,QAAMC,uBAAuB,GAAGD,IAAI,CAAJA,kBAAuBA,IAAI,CAAJA,MAAvBA,CAAuBA,CAAvBA,GANqB,IAMrD,CANqD,CAOrD;AACA;AACA;AACA;;AACA,uBAAgBD,aAAa,CAA7B,uBAA6B,CAA7B;AAXF,GAAO,CAAP;AAaD;;IAEoBG,W;;;;;AACnB,8BAAmB;AAAA;;AACjB;AACA,kBAAa;AAACL,UAAI,EAAEM,YAAY;AAAnB,KAAb;AAFiB;AAGlB;;;;SAEDC,M,GAAAA,kBAAS;AAAA,QACAP,IADA,GACQ,KADR,KACQ,CADR;AAEP,WACE,wEACE;AACE,eAAS,EADX;AAEE,6BAAuB,EAAE;AAACQ,cAAM,EAAER;AAAT;AAF3B,MADF,CADF;;;;EARqCS,4CAAK,CAACC,S","file":"component---node-modules-ocular-gatsby-src-templates-doc-page-markdown-jsx-1336ae379fd7512b8deb.js","sourcesContent":["import React from 'react';\n\nimport {graphql} from 'gatsby';\n\n// Query for the markdown doc by slug\n// (Note: We could just search the allMarkdown from WebsiteConfig ourselves)\nexport const query = graphql`\n  query DocBySlug($slug: String!) {\n    docBySlug: markdownRemark(fields: {slug: {eq: $slug}}) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        category\n        tags\n      }\n    }\n  }\n`;\n\nfunction replaceLinks(props) {\n  const {html} = props.data.docBySlug;\n  const {relativeLinks} = props.pageContext;\n\n  return html.replace(/href=\"([^\"]+)\"/g, (link, href) => {\n    // don't rewrite external links, don't rewrite links to anchors\n    if (href.startsWith('http') || href.startsWith('#')) {\n      // TODO - we could style them differently though\n      return link;\n    }\n    const hrefWithoutLeadingSlash = href.startsWith('/') ? href.slice(1) : href;\n    // replace links to:\n    // - known physical files, either relative to this file or relative to root\n    // - known routes, either relative to the route of this page or to the home page\n    // by a link to their corresponding route, expresed relative to the home page\n    return `href=\"${relativeLinks[hrefWithoutLeadingSlash]}\"`;\n  });\n}\n\nexport default class DocTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {html: replaceLinks(props)};\n  }\n\n  render() {\n    const {html} = this.state;\n    return (\n      <div>\n        <div\n          className=\"markdown-body\"\n          dangerouslySetInnerHTML={{__html: html}}\n        />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}