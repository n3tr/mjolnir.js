{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Overview mjolnir.js is a JavaScript event and gesture handling module. It is built on top of and named in homage of the classic hammer.js…","rawMarkdownBody":"# Overview\n\nmjolnir.js is a JavaScript event and gesture handling module. It is built on top of and named [in homage](https://en.wikipedia.org/wiki/Mj%C3%B6lnir) of the classic [hammer.js](http://hammerjs.github.io/) library.\n\n## Features\n\nOn top of the pointer gestures that Hammer.js offers, mjolnir.js adds support for the following events:\n\n- Right mouse button Gestures\n- Generic mouse events such as `pointermove`, `pointerover`, `pointerout`, and `pointerleave` without requiring button down\n- Mouse wheel events\n- Keyboard events\n- Event propagation without firing [DOM events](http://hammerjs.github.io/api/#domevents-false).\n\n## Platforms supported\n\nThe primary focus is to support so called evergreen browsers as well as mobile browsers, but PRs for older browser will generally be accepted.\n","slug":"docs","title":"Overview"},{"excerpt":"Upgrade Guide From 1.x to 2.0 The  option to  is removed. Use  to block scrolling. The  option to  is removed. Use  to enable right-button…","rawMarkdownBody":"# Upgrade Guide\n\n## From 1.x to 2.0\n\n- The `legacyBlockScroll` option to `EventManager` is removed. Use `eventManager.on('wheel', evt => evt.preventDefault())` to block scrolling.\n- The `rightButton` option to `EventManager` is removed. Use `eventManager.on('contextmenu', evt => evt.preventDefault())` to enable right-button clicking and dragging.\n","slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"Get Started Installation Usage Using with React The  can be initialized with an empty root: We may set the root element later to a DOM node…","rawMarkdownBody":"# Get Started\n\n## Installation\n\n```bash\nnpm install mjolnir.js\n```\n\n# Usage\n\n```js\nimport EventManager from 'mjolnir.js';\n\nconst eventManager = new EventManager(document.getElementById('container'));\nfunction onClick(event) {}\nfunction onPinch(event) {}\n\neventManager.on({\n  click: onClick,\n  pinch: onPinch\n});\n\n// ...\neventManager.destroy();\n```\n\n## Using with React\n\nThe `EventManager` can be initialized with an empty root:\n\n```js\nimport EventManager from 'mjolnir.js';\n\nconst eventManager = new EventManager();\n// Events can be registered now, but they will have no effect until\n// the event manager is attached to a DOM element\neventManager.on('dblclick', onDblClick);\n```\n\nWe may set the root element later to a DOM node that's rendered by React:\n\n```jsx\nimport React, {useRef, useEffect} from 'react';\n\nfunction App() {\n  const ref = useRef(null);\n  useEffect(() => {\n    // did mount\n    eventManager.setElement(ref.current);\n    // unmount\n    return () => eventManager.setElement(null);\n  }, []);\n\n  return (\n    <div ref={ref}>\n      <Child />\n    </div>\n  );\n}\n```\n\nOr add/remove event listeners when a React component is rendered:\n\n```js\nfunction Child() {\n  const ref = useRef(null);\n  useEffect(() => {\n    // did mount\n    eventManager.on('panstart', onDragChild, ref.current);\n    // unmount\n    return () => eventManager.off('panstart', onDragChild);\n  }, []);\n\n  return <div ref={ref}>Child node</div>;\n}\n```\n\nNote that React's event chain is independent from that of mjolnir.js'. Therefore, a `click` event handler registered with mjolnir.js cannot be blocked by calling `stopPropagation` on a React `onClick` event.\n","slug":"docs/get-started","title":"Get Started"},{"excerpt":"What's New","rawMarkdownBody":"# What's New\n","slug":"docs/whats-new","title":"What's New"},{"excerpt":"Event Event handlers subscribed via  will be called with one parameter. This event parameter always has the following properties:  (string…","rawMarkdownBody":"# Event\n\nEvent handlers subscribed via [`EventManager.on()`](/docs/api-reference/event-manager.md#on) will be called with one parameter. This event parameter always has the following properties:\n\n- `type` (string) - The event type to which the event handler is subscribed, e.g. `'click'` or `'pointermove'`\n- `center` (Object `{x, y}`) - The center of the event location (e.g. the centroid of a touch) relative to the viewport (basically, [`clientX/Y`](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX))\n- `offsetCenter` (Object `{x, y}`) - The center of the event location (e.g. the centroid of a touch)\n- `target` (Object) - The target of the event, as specified by the original `srcEvent`\n- `srcEvent` (Object) - The original event object dispatched by the browser to the JS runtime\n- `preventDefault` (Function) - Equivalent to `srcEvent.preventDefault`.\n- `stopPropagation` (Function) - Do not invoke handlers registered for any ancestors in the DOM tree.\n- `stopImmediatePropagation` (Function) - Do not invoke any other handlers registered for the same element or its ancestors.\n\nAdditionally, event objects for different event types contain a subset of the following properties:\n\n- `key` (number) - The keycode of the keyboard event\n- `leftButton` (boolean) - Flag indicating whether the left button is involved during the event\n- `middleButton` (boolean) - Flag indicating whether the middle button is involved during the event\n- `rightButton` (boolean) - Flag indicating whether the right button is involved during the event\n- `pointerType` (string) - A string indicating the type of input (e.g. `'mouse'`, `'touch'`, `'pointer'`)\n- `delta` (number) - The scroll magnitude/distance of a wheel event\n","slug":"docs/api-reference/event","title":"Event"},{"excerpt":"EventManager Provides a unified API for subscribing to events about both basic input events (e.g. 'mousemove', 'touchstart', 'wheel') and…","rawMarkdownBody":"# EventManager\n\nProvides a unified API for subscribing to events about both basic input events (e.g. 'mousemove', 'touchstart', 'wheel') and gestural input (e.g. 'click', 'tap', 'panstart').\n\n## Usage\n\n```js\nimport EventManager from 'mjolnir.js';\n\nconst eventManager = new EventManager(document.getElementById('container'));\nfunction onClick(event) {}\nfunction onPinch(event) {}\n\neventManager.on({\n  click: onClick,\n  pinch: onPinch\n});\n\n// ...\neventManager.destroy();\n```\n\n**Note:** While EventManager supports mouse and touch events, we recommend the use of [Pointer Events](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events) when possible for the broadest input device compatibility.\n\n## Methods\n\n### constructor\n\nCreates a new `EventManager` instance.\n\n`new EventManager(element, {events, recognizers})`\n\n- `element` {DOM Element, optional} - DOM element on which event handlers will be registered. Default `null`.\n- `options` {Object, optional} - Options\n- `options.events` {Object} - Map of {event name: handler} to register on init.\n- `options.recognizers` - {Object} Gesture recognizers from Hammer.js to register, as an Array in [Hammer.Recognizer format](http://hammerjs.github.io/api/#hammermanager). If not provided, a default set of recognizers will be used. See \"Gesture Events\" section below for more details.\n- `options.recognizerOptions` - {Object} Override the default options of `recognizers`. Keys are recognizer names and values are recognizer options. For a list of default recognizers, see \"Gesture Events\" section below.\n- `options.rightButton` - {Boolean} Recognizes click and drag from pressing the right mouse button. Default `false`. If turned on, the context menu will be disabled.\n- `options.touchAction` - {String} Allow browser default touch actions. Default `none`. See [hammer.js doc](http://hammerjs.github.io/touch-action/).\n- `options.legacyBlockScroll` - {Boolean} Blocks default page scroll behavior on wheel events. Default `true`. Set to `false` to enable scrolling. This option is for backward compatibility and will be removed in the next major release.\n\n### destroy\n\nTears down internal event management implementations.\n\n`eventManager.destroy()`\n\nNote: It is important to call `destroy` when done since `EventManager` adds event listeners to `window`.\n\n### setElement\n\nSet the DOM element on which event handlers will be registered. If element has been set, events will be unregistered from the previous element.\n\n`eventManager.setElement(element)`\n\n- `element` {DOM Element, optional} - DOM element on which event handlers will be registered.\n\n### on\n\nRegister an event handler function to be called on `event`.\n\n`eventManager.on(event, handler, srcElement)`\n\n- `event` {string|Object} - An event name (`String`) or map of event names to handlers.\n- `[handler]` {Function} - The function to be called on `event`.\n- `[srcElement]` {Node} - The source element of this event. If provided, only events that are targeting this element or its decendants will invoke the handler. If ignored, default to the whole document. Events are propagated up the DOM tree.\n\n** Note: Unlike the DOM event system, developers are responsible of deregistering event handlers when `srcElement` is removed. **\n\n### once\n\nRegister a one-time event handler function to be called on `event`. The handler is removed once it has been called.\n\n`eventManager.once(event, handler, srcElement)`\n\n- `event` {string|Object} - An event name (`String`) or map of event names to handlers.\n- `[handler]` {Function} - The function to be called on `event`.\n- `[srcElement]` {Node} - The source element of this event. If provided, only events that are targeting this element or its decendants will invoke the handler. If ignored, default to the whole document. Events are propagated up the DOM tree.\n\n### off\n\n- Deregister a previously-registered event handler.\n\n`eventManager.off(event, handler)`\n\n- `event` {string|Object} - An event name (String) or map of event names to handlers\n- `[handler]` {Function} - The function to be called on `event`.\n\n## Supported Events and Gestures\n\n### Basic input events\n\nKeyboard events are fired when focus is on the EventManager's target element or its decendants, unless typing into a text input.\n\n- `'keydown'`\n- `'keyup'`\n\nMouse event and pointer event names are interchangeable.\n\n- `'mousedown'` | `'pointerdown'`\n- `'mousemove'` | `'pointermove'`\n- `'mouseup'` | `'pointerup'`\n- `'mouseover'` | `'pointerover'`\n- `'mouseout'` | `'pointerout'`\n- `'mouseleave'` | `'pointerleave'`\n- `'wheel'`\n- `'contextmenu'`\n\n### Gesture events\n\nThe following events are generated with [hammer.js](http://hammerjs.github.io/)recognizers. You may fine-tune the behavior of these events by supplying `recognizerOptions` to the `EventManager` constructor.\n\n- The following events are controlled by the `rotate` ([Hammer.Rotate](https://hammerjs.github.io/recognizer-rotate/)) recognizer:\n  - `'rotate'`\n  - `'rotatestart'`\n  - `'rotatemove'`\n  - `'rotateend'`\n  - `'rotatecancel'`\n- The following events are controlled by the `pinch` ([Hammer.Pinch](https://hammerjs.github.io/recognizer-pinch/)) recognizer:\n  - `'pinch'`\n  - `'pinchin'`\n  - `'pinchout'`\n  - `'pinchstart'`\n  - `'pinchmove'`\n  - `'pinchend'`\n  - `'pinchcancel'`\n- The following events are controlled by the `swipe` ([Hammer.Swipe](https://hammerjs.github.io/recognizer-swipe/)) recognizer:\n  - `'swipe'`\n  - `'swipeleft'`\n  - `'swiperight'`\n  - `'swipeup'`\n  - `'swipedown'`\n- The following events are controlled by the `pan` ([Hammer.Pan](https://hammerjs.github.io/recognizer-pan/)) recognizer:\n  - `'pan'`\n  - `'panstart'`\n  - `'panmove'`\n  - `'panup'`\n  - `'pandown'`\n  - `'panleft'`\n  - `'panright'`\n  - `'panend'`\n  - `'pancancel'`\n- The following events are controlled by the `Press` ([Hammer.Pan](https://hammerjs.github.io/recognizer-press/)) recognizer:\n  - `'press'`\n- The following events are controlled by the `doubletap` ([Hammer.Pan](https://hammerjs.github.io/recognizer-tap/)) recognizer:\n  - `'doubletap'`\n  - `'dblclick'` - alias of `doubletap`\n- The following events are controlled by the `tap` ([Hammer.Pan](https://hammerjs.github.io/recognizer-tap/)) recognizer:\n  - `'tap'` - a single click. Not fired if double clicking.\n  - `'click'` - alias of `tap`\n- The following events are controlled by the `anytap` ([Hammer.Pan](https://hammerjs.github.io/recognizer-tap/)) recognizer:\n  - `'anytap'` - like `click`, but fired twice if double clicking.\n  - `'anyclick'` - alias of `anytap`\n\n## Event handling shims\n\n`EventManager` currently uses Hammer.js for gesture and touch support, but Hammer.js does not support all input event types out of the box. Therefore, `EventManager` employs the following modules to shim the missing functionality:\n\n### KeyInput\n\nHandles keyboard events.\n\n### MoveInput\n\nHandles pointer/touch/mouse move events while no button pressed, and leave events (for when the cursor leaves the DOM element registered with `EventManager`).\n\n### WheelInput\n\nHandles mouse wheel events and trackpad events that emulate mouse wheel events. Note that this module is stateful: it tracks time elapsed between events in order to determine the magnitude/scroll distance of an event.\n\n## Remarks\n\n- Current implementation delegates touch and gesture event registration and handling to Hammer.js. Includes shims for handling event not supported by Hammer.js, such as keyboard input, mouse move, and wheel input. This dependency structure may change in the future.\n\n- Hammer.js unsafely references `window` and `document`, and so will fail in environments without these constructs (e.g. Node). To mitigate this, Hammer.js modules are conditionally `require()`d, and replaced with mocks in non-browser environments.\n","slug":"docs/api-reference/event-manager","title":"EventManager"}]}}}